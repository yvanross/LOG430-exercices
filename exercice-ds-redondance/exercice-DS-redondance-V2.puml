@startuml Vue contexte
Actor AppClient
actor Capteur  as c
package SystèmeSommation {
[Sommateur] as s
[DataWebServer] as DS
}
c "*" -> "1" s
s "1" -> "1" DS
AppClient "*" .> "1" DS

@enduml

@startuml Vue composant et connecteur
Actor AppClient
[DataWebServer] as DS
[Capteur 1] as c1
[Capteur 2] as c2
[Capteur 3] as c3
[Sommateur 1] as s1
[Sommateur 2] as s2
[Sommateur 3] as s3
[Vote] as V

c1 --> V
c2 --> V
c3 --> V
V --> s1
V --> s2
V --> s3
V --> DS
[Orchestrateur] as M
M .u.> s1
M .u.> s2
M .u.> s3
V ..> M
AppClient .r.> DS

@enduml

@startuml C&C with interface
Actor AppClient

[Capteur 1..3] as C
[Orchestrateur] as O
() "IOrchestrateurCtrl" as IOC
[Vote] as V
() ISommateur as IV
() "IDataWebServer" as IDWS
[DataWebServer] as DWS

() "ISommateur" as IS
[Sommateur 1..3] as S
() "ISommateurCtrl" as ISC


C ..> IV
IV -- V
V ..> IS
IS --> S
V --> IDWS
IDWS -- DWS
AppClient --> IDWS

S -- ISC
O .u.> ISC

V ..> IOC
IOC -- O

@enduml

@startuml Allocation: Vue de déploiement
Actor AppClient



node MVCapteur1 <<ESP8266>> {
[Capteur 1] as C
}
node vm1{
[Orchestrateur] as O
() "IOrchestrateurCtrl" as IOC
[Vote] as V
() ISommateur as IV
() "IDataWebServer" as IDWS
[DataWebServer] as DWS

}


' () ISommateur as ISOM

node Sommateur<<redondance active 3 instance>>{
  () "ISommateur" as IS
  [Sommateur] as S
  () "ISommateurCtrl" as ISC
}

C ..> IV
IV -- V
V ..> IS
IS -- S

V ..> IDWS
IDWS -- DWS

IOC -- O
O ..> ISC 
ISC -- S

V ..> IOC

AppClient --> IDWS

@enduml


@startuml Opération normal
skinparam style strictuml 
Actor "<<Système externe>>\nCapteur x" as C
participant "vote:IVote" as IV
participant "sommateur[i]:ISommateur" as IS
participant "DataWebServer:IDataWebServer" as IDS
participant "orchestrator:IOrchestrateurCtrl" as IOC


note right of C: A quelle fréquence
C -> IV: addValue(id:integer, value:float)
par 
  IS -> IV: [id,value] = updatedSommation(\nidSommateur:integer,\nshadow:boolean,\nidCapteur:integer, \nvalue:float)
  note right of IV: wait 1 sec maximum
  IV --> IV: waitOrTimeout(length:int)  
end



' note right of IV: map[id] = [datetime,map[id] + value]
' IV -> IV: sommatorStillInShadow = \nupdateData(id:integer,shadown:boolean, value:float)

' note right of IV: quel delta de datetime est acceptable < 1ms?
' note right of IV: Comment le IVote change l'état du sommateur pour shadow: false \n voir le return sommatorStillInShadow
IV->IV: [value,idSommateurInError]=\ncanSendSommationData(\nid1,value1,id2,value2,id3,value3)
opt  value != null
  IV -> IDS: updateData(id:integer, name:string, value:float)
end

opt  idSommateurInError  !=  null
  note right of IV: voir diagramme 4.1
  IV -> IOC: sommateurDefectueux(idSommateur:integer)
end
@enduml

@startuml App client fait la lecture des données
skinparam style strictuml 
Actor "<<client web>>\nAppClient" as C
participant "dataWebServer:IDataWebServer" as S
C -> S: token:string = authenticate(clientId:string, clientKey:string)
alt clientValid
C -> S: res = getSommationData(clientToken:string)
end

@enduml

@startuml Détection d'un problème au niveau du composant de vote
skinparam style strictuml 
Actor "vote:IVote" as IV
participant "orchestrateur:IOrchestrateurCtrl" as IOC
participant "map<id,Sommateur>" as map
participant "sommateurFonctionnel:ISommateurCtrl" as ISF
participant "sommateurDefectueux:ISommateurCtrl" as ISD
participant "vote:IVoteCtrl" as IVC

IV -> IOC: sommateurDefectueux(idSommateur:integer)
IOC -> map: sommateurDefectueux = get(idSommateur:integer)
IOC -> IOC: sommateurFonctionnel = \ngetSommateurFonctionne(idSommateurDefectueux:integer)
note right of IOC: Il faudrait peut être mette la switch sur pause le temps d'ajouter le nouveau sommateur
IOC -> ISF: states:[id:integer,value:float]=getCurrentState()
note right of IOC: Doit passer par l'api docker de la machine virtuelle?
IOC -> Sommateur**: nouveauSommateur = new(id:integer, states:[id:integer,value:float],vote:IVote)
note right of IOC: est ce que le monitorCtrl connait la ISWITCH pour ajouter le nouveau sommateur
IOC -> IVC: replaceSommateur(sommateurDefectueux:ISommateur,nouveauSommateur:ISommateur)
IOC -> map: add(id:integer, nouveauSommateur:ISommateur)
note right of IOC: envoie la commande \nau serveur docker\nde la machine virtuelle
IOC -> ISD: kill()

' participant "<<interface>>\nISwitch" as SW
' participant "<<interface>>\nISommateur" as IS
' participant "<<interface>>\nISommateurCtrl" as ISC
' participant "<<interface>>\nISwitchCtrl" as ISWC
' participant "<<interface webServer>>\nIDataWebServer" as IDWS

@enduml




@startuml vue module
package SystemeSommation{

  class "SommateurInfo" as SI {
    id:integer,
    url:string,
    port:string
    static string filename
    static sommateurs:Sommateur[3] = readFromFile(filename:string)
    static saveToFile(filename:string)
  }
  Interface "IOrchestrateurCtrl" as IOC {
      sommateurDefectueux(idSommateur:integer)
      sommateurFonctionnel = getSommateurFonctionne(idSommateurDefectueux:integer)
      nouveauSommateur:ISommateurCtrl = createSommateur(id:integer, states:[id:integer,value:float],vote:IVote)
      replaceSommateur(sommateurDefectueux:ISommateur,nouveauSommateur:ISommateur)
  }
  class "Orchestrateur" as O {
    sommateurs:ISommateurCtrl[3]
    Orchestrateur(sommateurInfo:ISommateurInfo[3])
  }
  IOC <|.. O

  interface "ISommateur" as IV {
      [id,value] = updatedSommation(\nidSommateur:integer,\nshadow:boolean,\nidCapteur:integer, \nvalue:float)
  }
  class "Vote" as V {
    Vote(dataWebServer:IDataWebServer,orchestrateur:IOrchestrateurCtrl,sommateurInfo:SommateurInfo[3],securityToken:string)
    [value,idSommateurInError]=\ncanSendSommationData(\nid1,value1,id2,value2,id3,value3)
    url:string
    port:string
    securityToken:string
    sommateurs:ISommateur[3]
    orchestrateur:IOrchestrateurCtrl
    dataWebServer:IDataWebServer
  }
  IV <|.d. V

  interface "IDataWebServer" as IDWS {
    updateData(id:integer, name:string, value:float)
    token:string = authenticate(clientId:string, clientKey:string)
    res:[capteur_id:integer,value:float] = getSommationData(clientToken:string)
  }
  class "DataWebServer" as DWS {
    DataWebServer(url:string, port:string)
    url:string
    port:string
  }
  IDWS <|.. DWS
}
package Capteur{
  class "Capteur" as C{
      id:integer
      frequence:int 
      name:string
      value:float
      urlSommateur: string
      portSommateur:string
      token: string
      Capteur(id:integer,frequence:int,  name:string,  urlSommateur:string, portSommateur:string, sommateurToken:string)
  }
}

package Sommateur{
interface "ISommateur" as IS {
  [id,value] = updatedSommation(\nidSommateur:integer,\nshadow:boolean,\nidCapteur:integer, \nvalue:float)
}
interface "ISommateurCtrl" as ISC {
  states:[id:integer,value:float]=getCurrentState()
  kill()
}
class "Sommateur" as S{
    id:integer
    shadow:boolean
    Sommateur(id:integer,url:string, port:string, shadow:boolean)
     waitOrTimeout(length:int)  
}
S ..|> IS
S ..|> ISC 
}
class AppClient
AppClient -r-> IDWS: [[id:integer,value:float]]:json =  http://host/getCurrentStates()

C "*" --> "1" IV: http://host/sommation?value=123.44&id=1
V --> IS: http://host/sommation?value=123.44&id=1
V --> IDWS

V --> IOC

O --> ISC: [[id:integer,value:float]]:json= http://host/ctrl/getCurrentStates()\nhttp://host/ctrl/kill

V -- "3" SI
O -- "3" SI
@enduml



- 

**Machine virtuelle des capteurs**

- 
