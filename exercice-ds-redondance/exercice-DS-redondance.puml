@startuml Vue contexte
Actor AppClient
actor Capteur  as c
package SystèmeSommation {
[Sommateur] as s
[DataWebServer] as DS
}
c "*" -> "1" s
s "1" -> "1" DS
AppClient "*" .> "1" DS

@enduml

@startuml Vue composant et connecteur
Actor AppClient
[DataWebServer] as DS
[Capteur 1] as c1
[Capteur 2] as c2
[Capteur 3] as c3
[Switch] as SW
[Sommateur 1] as s1
[Sommateur 2] as s2
[Sommateur 3] as s3
[Vote] as V

c1 --> SW
c2 --> SW
c3 --> SW
SW --> s1
SW --> s2
SW --> s3
s1 --> V
s2 --> V
s3 -> V
V --> DS
[Orchestrateur] as M
M .u.> s1
M .u.> s2
M .u.> s3
M .u.> SW
V ..> M
AppClient .r.> DS

@enduml

@startuml C&C with interface
Actor AppClient

[Capteur 1] as c1
[Capteur 2] as c2
[Capteur 3] as c3
  [Switch] as SW
  [Orchestrateur] as M
  () "ISwitchCtrl" as iswc
  () "IOrchestrateurCtrl" as imc
  () "switch:ISommateur" as ISW
  [Vote] as V
  () IVote as IV
  () "IDataWebServer" as idws
  [DataWebServer] as DS
  () IDataWebServer as IDS


' () ISommateur as ISOM

() "ISommateur" as is1
[Sommateur] as s1
() "ISommateurCtrl" as isc1

() is1 -- s1

ISW - SW
c1 ..> ISW
c2 ..> ISW
c3 ..> ISW
SW ..> is1: 3 instances
s1 ..> IV
IV -- V
V ..> IDS
IDS -- DS

' controle
M --- imc
V .> imc
M ...> isc1

s1 -u- isc1
iswc -- SW
M ..> iswc

DS -l- idws
AppClient .u.> idws

@enduml

@startuml Allocation: Vue de déploiement
Actor AppClient

node MVCapteur1 <<ESP8266>> {
[Capteur 1] as c1
}
node MVCapteur2 <<ESP8266>> {
[Capteur 2] as c2
}
node MVCapteur3 <<ESP8266>> {
[Capteur 3] as c3
}
node vm1{
    [Switch] as SW
    [Orchestrateur] as M
    () "ISwitchCtrl" as iswc
    () "IOrchestrateurCtrl" as imc
    () "switch:ISommateur" as ISW
    [Vote] as V
    () IVote as IV
    () "IDataWebServer" as idws
    [DataWebServer] as DS
    () IDataWebServer as IDS
}


' () ISommateur as ISOM

node sommateur<<redondance active 3 instance>>{
() "ISommateur" as is1
[Sommateur] as s1
() "ISommateurCtrl" as isc1

}


() is1 -- s1

ISW -- SW
c1 ..> ISW
c2 ..> ISW
c3 ..> ISW
SW ..> is1: 3 instances
s1 ..> IV
IV -- V
V ..> IDS
IDS -- DS

' controle
M --- imc
V .> imc
M ...> isc1

s1 -u- isc1
iswc -- SW
M ..> iswc

DS -l- idws
AppClient .u.> idws

@enduml


@startuml Opération normal
skinparam style strictuml 
Actor "<<Système externe>>\nCapteur x" as C
participant "switch:ISommateur" as ISW
participant "sommateur[i]:ISommateur" as IS
participant "vote:IVote" as IV
participant "DataWebServer:IDataWebServer" as IDS
participant "monitor:IMonitorCtrl" as IMC

note right of C: A quelle fréquence
C -> ISW: addValue(id:integer, value:float)
par 
  ISW -> IS: addValue(id:integer, value:float)
  IS -> IV: updatedSommation(idSommateur:integer,shadow:boolean,idCapteur:integer, value:float)
end

note right of IV: map[id] = [datetime,map[id] + value]
IV -> IV: sommatorStillInShadow = \nupdateData(id:integer,shadown:boolean, value:float)

note right of IV: quel delta de datetime est acceptable < 1ms?
note right of IV: Comment le IVote change l'état du sommateur pour shadow: false \n voir le return sommatorStillInShadow
IV->IV: [res,value,idSommateurInError] = canSendSommationData()
opt  res == true
  IV -> IDS: updateData(id:integer, name:string, value:float)
end

opt  idSommateurInError  !=  null
  note right of IV: voir diagramme 4.1
  IV -> IMC: sommateurDefectueux(vote:IVote,idSommateur:integer)
end
@enduml

@startuml App client fait la lecture des données
skinparam style strictuml 
Actor "<<client web>>\nAppClient" as C
participant "dataWebServer:IDataWebServer" as S
C -> S: token:string = authenticate(clientId:string, clientKey:string)
alt clientValid
C -> S: res = getSommationData(clientToken:string)
end

@enduml

@startuml Détection d'un problème au niveau du composant de vote
skinparam style strictuml 
Actor "vote:IVote" as IV
participant "monitor:IMonitorCtrl" as IMC
participant "map<id,Sommateur>" as map
participant "sommateurFonctionnel:ISommateurCtrl" as ISF
participant "<<sommateurDefectueux:ISommateurCtrl" as ISD
participant "switch:ISommateur" as ISW

IV -> IMC: sommateurDefectueux(vote:IVote,idSommateur:integer)
IMC -> map: sommateurDefectueux = get(idSommateur:integer)
IMC -> IMC: sommateurFonctionnel = \ngetSommateurFonctionne(idSommateurDefectueux:integer)
note left of ISW: Il faudrait peut être mette la switch sur pause le temps d'ajouter le nouveau sommateur
IMC -> ISF: capteurs:Capteur[]=getCapteurs()
note right of IMC: Doit passer par l'api docker de la machine virtuelle?
IMC -> Sommateur**: nouveauSommateur = new(id:integer, capteur:Capteur[],vote:IVote)
note left of ISW: est ce que le monitorCtrl connait la ISWITCH pour ajouter le nouveau sommateur
IMC -> ISW: replaceSommateur(sommateurDefectueux:ISommateur,nouveauSommateur:ISommateur)
IMC -> map: add(id:integer, nouveauSommateur:ISommateur)
note right of IMC: envoie la commande \nau serveur docker\nde la machine virtuelle
IMC -> ISD: kill()

' participant "<<interface>>\nISwitch" as SW
' participant "<<interface>>\nISommateur" as IS
' participant "<<interface>>\nISommateurCtrl" as ISC
' participant "<<interface>>\nISwitchCtrl" as ISWC
' participant "<<interface webServer>>\nIDataWebServer" as IDWS

@enduml

@startuml Ping/echo ou heartbeat des sommateurs
skinparam style strictuml 
Actor "vote:IVote" as IV
participant "monitor:IMonitorCtrl" as IMC
participant "map<id,Sommateur>" as map
participant "sommateur[i]:ISommateurCtrl" as ISC
participant "switch:ISommateur" as SW
participant "sommateur:ISommateur" as IS
participant "sommateur:ISommateurCtrl" as ISC
participant "switch:ISwitchCtrl" as ISWC
participant "dataWebServer:IDataWebServer" as IDWS

@enduml



@startuml vue module
package SystemeSommation{
  Interface IOrchestrateurCtrl {
      sommateurDefectueux(idSommateur:integer)
  }
  class Orchestrateur
  IOrchestrateurCtrl <|.. Orchestrateur

  interface "ISommateur" as ISwitch
  interface ISwitchCtrl
  class Switch{
  }

  Switch .u.|> ISwitch
  Switch .u.|> ISwitchCtrl
  interface IVote
  class Vote
  IVote <|.d. Vote

  interface IDataWebServer
  class DataWebServer
  IDataWebServer <|.. DataWebServer
}
package Capteur{
  class Capteur{
      id:integer
      frequence:int 
      name:string
      value:float
      urlSwitch: string
      token: string
  }
}

package Sommateur{
interface ISommateur
interface ISommateurCtrl
class Sommateur {
    id:integer
    shadow:boolean
}
Sommateur ..|> ISommateur
Sommateur ..|> ISommateurCtrl
}
class AppClient
AppClient --l> DataWebServer: utilise

Switch "1" --> "1" IOrchestrateurCtrl: indique un problème à >
Switch "1" --> "*" ISommateur: envoie les données en redondance

Orchestrateur "1" -- "*" ISommateurCtrl: gère >
IVote "1" <-- "*" Sommateur: valide l'état des >
Capteur "*" --> "1" ISwitch: envoie la température 
Vote --> IDataWebServer
' Sommateur "1" *--> "*" Capteur: calcul la somme de chaque
Orchestrateur --> ISwitchCtrl: ajout un nouveau sommateur
@enduml


